{"version":3,"file":"static/js/34.edc68b3b.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.js","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n    padding: 10px;\n    display: flex;\n    flex-direction: column;\n    border: 1px solid black;\n`\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n`\nexport const Input = styled.input`\n    width: 300px;\n    margin-bottom: 10px;\n`\nexport const Button = styled.button`\n    padding: 10px;\n    background-color: #b6b7b8;\n    border: none;\n    border-radius: 4px;\n\n    &:hover, &:focus {\n        background-color: #d4d5d6;\n    }\n`\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n    width: 400px;\n    padding: 5px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    border-top: 1px solid rgb(31, 31, 32);\n`\nexport const Span = styled.span`\n    font-weight: 600;\n`\n\nexport const Button = styled.button`\n    width: 70px;\n    height: 30px;\n    margin-left: 15px;\n`","import { contactApi } from 'redux/contacts';\nimport { LoaderMini } from 'components/Loader/Loader';\nimport { Item, Button, Span } from './ContactItem.styled';\nimport PropTypes from 'prop-types';\n\nconst ContactItem = ({ id, name, number }) => {\n    const [deleteContact, {isLoading: isDeleting}] = contactApi.useDeleteContactMutation();\n\n    return (\n        <Item>\n            <p  >{name} : <Span>{number}</Span></p>\n            <Button type='button' disabled={isDeleting} onClick={() => deleteContact(id)}>\n                {isDeleting ? <LoaderMini /> : <span>Delete</span>}\n            </Button>\n        </Item>\n    );\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n};","import styled from 'styled-components';\n\nexport const List = styled.ul`\n`\n","import { useSelector } from 'react-redux';\nimport ContactItem from '../ContactItem/ContactItem';\nimport { filterSlice, contactApi } from 'redux/contacts';\nimport { Loader } from 'components/Loader/Loader';\nimport { List } from './ContactList.styled';\n\nconst ContactList = () => {\n    const { data: contacts, isLoading: loadingList } = contactApi.useGetContactByNameQuery();\n    const filterValue = useSelector(filterSlice.getFilter);\n\n    const filterContact = () => {\n        const normalizedFilter = filterValue.toLocaleLowerCase();\n        return (\n            contacts &&\n            contacts.filter(contact =>\n                contact.name.toLocaleLowerCase().includes(normalizedFilter)\n            )\n        );\n    };\n        \n    return (\n        <List>\n            {loadingList && <Loader />}\n            {contacts && (\n                filterContact().map(contact => (\n                    <ContactItem\n                        key={contact.id}\n                        contact={contact}\n                    />\n                ))\n            )}\n        </List>\n    );\n};\n\nexport default ContactList;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useState } from \"react\";\nimport { nanoid } from 'nanoid';\nimport { contactApi } from 'redux/contacts';\nimport { Loader } from \"components/Loader/Loader\";\nimport { Form, Label, Input, Button } from './ContactForm.styled';\n\nexport default function ContactForm() {\n    const [addContact, { isLoading }] = contactApi.useAddContactMutation();\n    const { data: contacts } = contactApi.useGetContactByNameQuery();\n    \n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const handleChange = e => {\n        const { name, value } = e.currentTarget;\n\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            \n            case 'number':\n                setNumber(value);\n                break;\n            \n            default:\n                return;\n        }\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        const nameItem = contacts.map(value => value.name.toLowerCase());\n\n        if (nameItem.includes(name.toLowerCase())) {\n            alert(`${name} is already in contacts`);\n        } else {\n            addContact({ name, number, id: nanoid() });\n            reset();\n        }\n    };\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n    };\n\n        return (\n            <Form onSubmit={handleSubmit}>\n                <Label> Name\n                    <Input\n                        type=\"text\"\n                        name=\"name\"\n                        value={name}\n                        onChange={handleChange}\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        required\n                    />\n                </Label>\n                <Label> Number\n                    <Input\n                        type=\"tel\"\n                        name=\"number\"\n                        value={number}\n                        onChange={handleChange}\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        required\n                        />\n                </Label>\n                <Button type=\"submit\" disabled={isLoading}>\n                    {isLoading ? <Loader /> : <div>Add Contact</div>}\n                </Button>\n            </Form>\n        );\n};","import styled from 'styled-components';\n\nexport const Label = styled.label`\n    width: 75%;\n    padding: 10px;\n    display: flex;\n    flex-direction: column;\n`\nexport const Input = styled.input`\n    margin-top: 15px;\n`\n","import { filterSlice } from 'redux/contacts';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Label, Input } from './Filter.styled'\n\nconst Filter = () => {\n    const dispatch = useDispatch();\n    const filterName = useSelector(filterSlice.getFilter);\n\n    const changeFilter = e => {\n        dispatch(filterSlice.filterContact(e.currentTarget.filterName));\n    };\n\n    return (\n        <Label>\n            Find contacts by name\n            <Input\n                type=\"text\"\n                name=\"filter\"\n                value={filterName}\n                onChange={changeFilter}\n            />\n        </Label>\n    );\n};\n\nexport default Filter;","import ContactList from 'components/ContactList/ContactList';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\n\nexport const ContactsPage = () => {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"names":["Form","styled","Label","Input","Button","Item","Span","id","name","number","contactApi","useDeleteContactMutation","deleteContact","isDeleting","isLoading","type","disabled","onClick","Loader","L","List","useGetContactByNameQuery","contacts","data","loadingList","filterValue","useSelector","filterSlice","getFilter","normalizedFilter","toLocaleLowerCase","filter","contact","includes","filterContact","map","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","ContactForm","useAddContactMutation","addContact","useState","setName","setNumber","handleChange","e","currentTarget","value","reset","onSubmit","preventDefault","toLowerCase","alert","onChange","pattern","title","required","dispatch","useDispatch","filterName","ContactsPage","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties"],"sourceRoot":""}